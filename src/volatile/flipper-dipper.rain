tokens:
  eusdt:
    network: flare
    address: 0x96B41289D90444B8adD57e6F265DB5aE8651DF29
    decimals: 6
  eeth:
    network: flare
    address: 0xa76DCDdcE60a442d69Bac7158F3660f50921b122
    decimals: 18
  wflr:
    network: flare
    address: 0x1D80c49BbBCd1C0911346656B529DF9E5c2F783d
    decimals: 18

orders:
  flare:
    orderbook: flare
    # vault-id is generated on cli `openssl rand -hex 32`
    inputs:
      - token: wflr
        vault-id: 0x93479e9a7d7dd2757a668a27ce29698e370ab655d2b39344cc5c0e246a07f38d
      - token: eusdt
        vault-id: 0x93479e9a7d7dd2757a668a27ce29698e370ab655d2b39344cc5c0e246a07f38d
    outputs:
      - token: wflr
        vault-id: 0x93479e9a7d7dd2757a668a27ce29698e370ab655d2b39344cc5c0e246a07f38d
      - token: eusdt
        vault-id: 0x93479e9a7d7dd2757a668a27ce29698e370ab655d2b39344cc5c0e246a07f38d
  flare-any-3:
    orderbook: flare
    inputs:
      - token: wflr
        vault-id: 0x93479e9a7d7dd2757a668a27ce29698e370ab655d2b39344cc5c0e246a07f38d
      - token: eusdt
        vault-id: 0x93479e9a7d7dd2757a668a27ce29698e370ab655d2b39344cc5c0e246a07f38d
      - token: eeth
        vault-id: 0x93479e9a7d7dd2757a668a27ce29698e370ab655d2b39344cc5c0e246a07f38d
    outputs:
      - token: wflr
        vault-id: 0x93479e9a7d7dd2757a668a27ce29698e370ab655d2b39344cc5c0e246a07f38d
      - token: eusdt
        vault-id: 0x93479e9a7d7dd2757a668a27ce29698e370ab655d2b39344cc5c0e246a07f38d
      - token: eeth
        vault-id: 0x93479e9a7d7dd2757a668a27ce29698e370ab655d2b39344cc5c0e246a07f38d

scenarios:
  flare:
    orderbook: flare
    runs: 1
    bindings:
      raindex-subparser: 0xAfD94467d2eC43D9aD39f835BA758b61b2f41A0E
      flare-subparser: 0x87D1f842347b7802A29FD9010c464E760745a4d2
      fallback-ratio: '''fallback-ftso-usd'
      fallback-ftso-multiplier: 1e18
    scenarios:
      constant:
        bindings:
          ratio-multiplier: '''constant-ratio-multiplier'
          constant-ratio-multiplier-val18: 1e15
      linear-decay:
        bindings:
          ratio-multiplier: '''linear-decay-multiplier'
          linear-decay-start18: 105e16
          # 1% per day
          linear-decay-rate18: 115740740740
          seconds-per-epoch: 3600
          linear-decay-floor18: 1e18
      ramp-down:
        bindings:
          # C = 1.02
          # D = 14
          # => start at 102% and hit 0 after 14 epochs.
          # => cuts below 100% after about 10 epochs.
          # https://www.desmos.com/calculator/rac340ngwk
          ratio-multiplier: '''ramp-down'
          ramp-down-c18: 102e16
          ramp-down-d18: 14e18
          seconds-per-epoch: 86400
  any-flare:
    deployer: flare
    orderbook: flare
    bindings:
      raindex-subparser: 0xAfD94467d2eC43D9aD39f835BA758b61b2f41A0E
      flare-subparser: 0x87D1f842347b7802A29FD9010c464E760745a4d2
      fallback-ratio: '''fb-halflife'
      # date +%s
      fb-halflife-start-time: 1715694829
      # anything way bigger than the expected ratio is fine
      fb-halflife-start-io18: 1e36
      # half an hour per halving covers a lot of space while
      # giving time for bots to respond in the correct range
      fb-halflife-seconds: 1800
      # C = 1.011
      # D = 7
      # => start at 101% and hit 0 after 7 epochs.
      # => cuts below 100% after 2.5 epochs.
      # https://www.desmos.com/calculator/38ien12798
      ratio-multiplier: '''ramp-down'
      ramp-down-c18: 1011e15
      ramp-down-d18: 7e18
      seconds-per-epoch: 86400

charts:
  flare:

deployments:
  flare-constant:
    order: flare
    scenario: flare.constant

  flare-linear-decay:
    order: flare
    scenario: flare.linear-decay

  flare-ramp-down:
    order: flare
    scenario: flare.ramp-down

  any-ramp-down:
    order: flare
    scenario: any-flare

  any-3-ramp-down:
    order: flare-any-3
    scenario: any-flare
---

#seconds-per-epoch !Number of seconds to treat as 1 epoch. E.g. 86400 is 1 day per epoch.
#linear-decay-time-key "linear-decay-last-time"
#epochs-since-last-trade
input-time-key: hash(order-hash() input-token() linear-decay-time-key),
output-time-key: hash(order-hash() output-token() linear-decay-time-key),
/* the input time key in this trade will be the output time key for the next trade */
:set(input-time-key block-timestamp()),
output-last-time: any(get(output-time-key) block-timestamp()),
duration-seconds: int-sub(block-timestamp() output-last-time),
duration-seconds18: int-to-decimal18(duration-seconds),
epochs18: decimal18-div(duration-seconds18 int-to-decimal18(seconds-per-epoch));

#ramp-down-c18 !C in ramp down equation.
#ramp-down-d18 !D in ramp down equation.
#ramp-down
/* y = C - e^(x - D) */
x18: call<'epochs-since-last-trade>(),
/* want the absolute diff here so we don't go negative */
exponent18: decimal18-sub(
  decimal18-max(x18 ramp-down-d18)
  decimal18-min(x18 ramp-down-d18)
),
e: 2718281828459045235,
uramp18: decimal18-power(e exponent18),
/* invert uramp18 if (x - D) is negative */
ramp18: if(greater-than(ramp-down-d18 x18) decimal18-inv(uramp18) uramp18),
y18: decimal18-saturating-sub(ramp-down-c18 ramp18);

#linear-decay-start18 !Starting position for the linear decay.
#linear-decay-rate18 !Linear decay decrease per unit time (seconds).
#linear-decay-floor18 !Minimum value the multiplier will decay to.
#linear-decay-multiplier
epochs18: call<'epochs-since-last-trade>(),
decay-amount18: decimal18-saturating-sub(linear-decay-start18 decimal18-mul(linear-decay-rate18 epochs18)),
_: decimal18-max(decay-amount18 linear-decay-floor18);

#constant-ratio-multiplier-val18 !Constant value to multiply the breakeven ratio by.
#constant-ratio-multiplier
_: constant-ratio-multiplier-val18;

#fb-halflife-start-time !Starting time for the fallback dutch auction.
#fb-halflife-start-io18 !Starting value for the fallback dutch auction.
#fb-halflife-seconds !Number of seconds per halflife.
#fb-halflife
time-key: hash(order-hash() "fb-halflife-last-time"),
last-time: any(
  get(time-key)
  fb-halflife-start-time
),
:set(time-key block-timestamp()),
duration: int-sub(
  block-timestamp()
  last-time
),
fb-halflife-seconds-stretched: int-mul(fb-halflife-seconds 10),
multiplier: decimal18-power(5e17 decimal18-div(int-to-decimal18(duration) int-to-decimal18(fb-halflife-seconds-stretched))),
/* multiply by the multiplier 10 times because we stretched the halflife duration by 10x */
/* this avoids precision issues at the lower end of a large dutch auction */
_: decimal18-mul(
  fb-halflife-start-io18
  multiplier
  multiplier
  multiplier
  multiplier
  multiplier
  multiplier
  multiplier
  multiplier
  multiplier
  multiplier
);

#breakeven-io-ratio
prev-input-vault-balance: get(
  hash(
    order-hash()
    input-token()
  )
),
prev-input-vault-balance18: decimal18-scale-18-dynamic(
  input-token-decimals()
  prev-input-vault-balance
),
output-vault-balance18: decimal18-scale-18-dynamic(
  output-token-decimals()
  output-vault-balance-before()
),
_: decimal18-div(
  prev-input-vault-balance18
  output-vault-balance18
);

#ratio-multiplier !Expression for the multiplier to the breakeven ratio.
#desired-ratio
_: decimal18-mul(
  call<'breakeven-io-ratio>()
  call<ratio-multiplier>()
);

#fallback-ftso-multiplier !The multiplier to apply to the FTSO to incentivise the initial clear.
#fallback-ftso-usd
_: decimal18-mul(
  ftso-current-price-usd("FLR" 3600)
  fallback-ftso-multiplier
);

#fallback-constant-value !A constant fallback value.
#fallback-constant
_: fallback-constant-value;

#fallback-ratio !Expression for the ratio to use when there is no history for the pair.
#raindex-subparser !The subparser for raindex words.
#flare-subparser !The subparser for flare words.
#calculate-io
using-words-from raindex-subparser flare-subparser
amount: decimal18-scale-18-dynamic(
  output-token-decimals()
  output-vault-balance-before()
),
io-ratio: any(
  call<'desired-ratio>()
  call<fallback-ratio>()
);

#handle-io
/* avoid noops corrupting state */
:ensure(
  output-vault-balance-before()
  "Output noop."
),
/* avoid partial vault clears as it would break our ratio logic */
:ensure(
  equal-to(
    output-vault-balance-before()
    output-vault-balance-decrease()
  )
  "Partial clear."
),
/* record the output so that it can be the input on the return trip */
:set(
  hash(
    order-hash()
    output-token()
  )
  output-vault-balance-before()
);